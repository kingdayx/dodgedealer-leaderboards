// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ExampleEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ExampleEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ExampleEntity", id.toString(), this);
  }

  static load(id: string): ExampleEntity | null {
    return store.get("ExampleEntity", id) as ExampleEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }
}

export class ReferralRewards extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ReferralRewards entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ReferralRewards entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ReferralRewards", id.toString(), this);
  }

  static load(id: string): ReferralRewards | null {
    return store.get("ReferralRewards", id) as ReferralRewards | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get by(): Bytes {
    let value = this.get("by");
    return value.toBytes();
  }

  set by(value: Bytes) {
    this.set("by", Value.fromBytes(value));
  }

  get Referrer(): Bytes {
    let value = this.get("Referrer");
    return value.toBytes();
  }

  set Referrer(value: Bytes) {
    this.set("Referrer", Value.fromBytes(value));
  }

  get iterationDaily(): BigInt {
    let value = this.get("iterationDaily");
    return value.toBigInt();
  }

  set iterationDaily(value: BigInt) {
    this.set("iterationDaily", Value.fromBigInt(value));
  }

  get iterationWeekly(): BigInt {
    let value = this.get("iterationWeekly");
    return value.toBigInt();
  }

  set iterationWeekly(value: BigInt) {
    this.set("iterationWeekly", Value.fromBigInt(value));
  }

  get iterationMonthly(): BigInt {
    let value = this.get("iterationMonthly");
    return value.toBigInt();
  }

  set iterationMonthly(value: BigInt) {
    this.set("iterationMonthly", Value.fromBigInt(value));
  }
}

export class RefferredBy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RefferredBy entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RefferredBy entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RefferredBy", id.toString(), this);
  }

  static load(id: string): RefferredBy | null {
    return store.get("RefferredBy", id) as RefferredBy | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get by(): Bytes {
    let value = this.get("by");
    return value.toBytes();
  }

  set by(value: Bytes) {
    this.set("by", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get iterationDaily(): BigInt {
    let value = this.get("iterationDaily");
    return value.toBigInt();
  }

  set iterationDaily(value: BigInt) {
    this.set("iterationDaily", Value.fromBigInt(value));
  }

  get iterationWeekly(): BigInt {
    let value = this.get("iterationWeekly");
    return value.toBigInt();
  }

  set iterationWeekly(value: BigInt) {
    this.set("iterationWeekly", Value.fromBigInt(value));
  }

  get iterationMonthly(): BigInt {
    let value = this.get("iterationMonthly");
    return value.toBigInt();
  }

  set iterationMonthly(value: BigInt) {
    this.set("iterationMonthly", Value.fromBigInt(value));
  }

  get treePosition(): BigInt {
    let value = this.get("treePosition");
    return value.toBigInt();
  }

  set treePosition(value: BigInt) {
    this.set("treePosition", Value.fromBigInt(value));
  }
}
