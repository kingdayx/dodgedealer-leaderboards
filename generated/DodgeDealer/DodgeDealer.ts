// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EnableAccountStaking extends ethereum.Event {
  get params(): EnableAccountStaking__Params {
    return new EnableAccountStaking__Params(this);
  }
}

export class EnableAccountStaking__Params {
  _event: EnableAccountStaking;

  constructor(event: EnableAccountStaking) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get duration(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EnableStaking extends ethereum.Event {
  get params(): EnableStaking__Params {
    return new EnableStaking__Params(this);
  }
}

export class EnableStaking__Params {
  _event: EnableStaking;

  constructor(event: EnableStaking) {
    this._event = event;
  }

  get enabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class EnableSwapAndLiquify extends ethereum.Event {
  get params(): EnableSwapAndLiquify__Params {
    return new EnableSwapAndLiquify__Params(this);
  }
}

export class EnableSwapAndLiquify__Params {
  _event: EnableSwapAndLiquify;

  constructor(event: EnableSwapAndLiquify) {
    this._event = event;
  }

  get enabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class ExcludeFromFees extends ethereum.Event {
  get params(): ExcludeFromFees__Params {
    return new ExcludeFromFees__Params(this);
  }
}

export class ExcludeFromFees__Params {
  _event: ExcludeFromFees;

  constructor(event: ExcludeFromFees) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isExcluded(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class GasForProcessingUpdated extends ethereum.Event {
  get params(): GasForProcessingUpdated__Params {
    return new GasForProcessingUpdated__Params(this);
  }
}

export class GasForProcessingUpdated__Params {
  _event: GasForProcessingUpdated;

  constructor(event: GasForProcessingUpdated) {
    this._event = event;
  }

  get newValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LeaderboardCompletion extends ethereum.Event {
  get params(): LeaderboardCompletion__Params {
    return new LeaderboardCompletion__Params(this);
  }
}

export class LeaderboardCompletion__Params {
  _event: LeaderboardCompletion;

  constructor(event: LeaderboardCompletion) {
    this._event = event;
  }

  get leaderboardCase(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get iteration(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LiquidityWalletUpdated extends ethereum.Event {
  get params(): LiquidityWalletUpdated__Params {
    return new LiquidityWalletUpdated__Params(this);
  }
}

export class LiquidityWalletUpdated__Params {
  _event: LiquidityWalletUpdated;

  constructor(event: LiquidityWalletUpdated) {
    this._event = event;
  }

  get newLiquidityWallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldLiquidityWallet(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProcessedDividendTracker extends ethereum.Event {
  get params(): ProcessedDividendTracker__Params {
    return new ProcessedDividendTracker__Params(this);
  }
}

export class ProcessedDividendTracker__Params {
  _event: ProcessedDividendTracker;

  constructor(event: ProcessedDividendTracker) {
    this._event = event;
  }

  get iterations(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get claims(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lastProcessedIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get automatic(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get gas(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get processor(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class ReferralRewards extends ethereum.Event {
  get params(): ReferralRewards__Params {
    return new ReferralRewards__Params(this);
  }
}

export class ReferralRewards__Params {
  _event: ReferralRewards;

  constructor(event: ReferralRewards) {
    this._event = event;
  }

  get by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get iterationDaily(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get iterationWeekly(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get iterationMonthly(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get treePosition(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class ReferredBy extends ethereum.Event {
  get params(): ReferredBy__Params {
    return new ReferredBy__Params(this);
  }
}

export class ReferredBy__Params {
  _event: ReferredBy;

  constructor(event: ReferredBy) {
    this._event = event;
  }

  get by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get Referrer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get iterationDaily(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get iterationWeekly(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get iterationMonthly(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SendDividends extends ethereum.Event {
  get params(): SendDividends__Params {
    return new SendDividends__Params(this);
  }
}

export class SendDividends__Params {
  _event: SendDividends;

  constructor(event: SendDividends) {
    this._event = event;
  }

  get dividends(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get marketing(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get success(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class SetAutomatedMarketMakerPair extends ethereum.Event {
  get params(): SetAutomatedMarketMakerPair__Params {
    return new SetAutomatedMarketMakerPair__Params(this);
  }
}

export class SetAutomatedMarketMakerPair__Params {
  _event: SetAutomatedMarketMakerPair;

  constructor(event: SetAutomatedMarketMakerPair) {
    this._event = event;
  }

  get pair(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class SetPreSaleWallet extends ethereum.Event {
  get params(): SetPreSaleWallet__Params {
    return new SetPreSaleWallet__Params(this);
  }
}

export class SetPreSaleWallet__Params {
  _event: SetPreSaleWallet;

  constructor(event: SetPreSaleWallet) {
    this._event = event;
  }

  get wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SwapAndLiquify extends ethereum.Event {
  get params(): SwapAndLiquify__Params {
    return new SwapAndLiquify__Params(this);
  }
}

export class SwapAndLiquify__Params {
  _event: SwapAndLiquify;

  constructor(event: SwapAndLiquify) {
    this._event = event;
  }

  get tokensSwapped(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ethReceived(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokensIntoLiqudity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TradingEnabled extends ethereum.Event {
  get params(): TradingEnabled__Params {
    return new TradingEnabled__Params(this);
  }
}

export class TradingEnabled__Params {
  _event: TradingEnabled;

  constructor(event: TradingEnabled) {
    this._event = event;
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateAllowTokens extends ethereum.Event {
  get params(): UpdateAllowTokens__Params {
    return new UpdateAllowTokens__Params(this);
  }
}

export class UpdateAllowTokens__Params {
  _event: UpdateAllowTokens;

  constructor(event: UpdateAllowTokens) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get allow(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class UpdateDividendTracker extends ethereum.Event {
  get params(): UpdateDividendTracker__Params {
    return new UpdateDividendTracker__Params(this);
  }
}

export class UpdateDividendTracker__Params {
  _event: UpdateDividendTracker;

  constructor(event: UpdateDividendTracker) {
    this._event = event;
  }

  get newAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdateFees extends ethereum.Event {
  get params(): UpdateFees__Params {
    return new UpdateFees__Params(this);
  }
}

export class UpdateFees__Params {
  _event: UpdateFees;

  constructor(event: UpdateFees) {
    this._event = event;
  }

  get dev(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get BNBRewardsBuy(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get BNBRewardsSell(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get referralFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class UpdateFeesReferred extends ethereum.Event {
  get params(): UpdateFeesReferred__Params {
    return new UpdateFeesReferred__Params(this);
  }
}

export class UpdateFeesReferred__Params {
  _event: UpdateFeesReferred;

  constructor(event: UpdateFeesReferred) {
    this._event = event;
  }

  get dev(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get BNBRewardsBuy(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get BNBRewardsSell(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UpdatePayoutToken extends ethereum.Event {
  get params(): UpdatePayoutToken__Params {
    return new UpdatePayoutToken__Params(this);
  }
}

export class UpdatePayoutToken__Params {
  _event: UpdatePayoutToken;

  constructor(event: UpdatePayoutToken) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdateReferralTreeFees extends ethereum.Event {
  get params(): UpdateReferralTreeFees__Params {
    return new UpdateReferralTreeFees__Params(this);
  }
}

export class UpdateReferralTreeFees__Params {
  _event: UpdateReferralTreeFees;

  constructor(event: UpdateReferralTreeFees) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateStakingAmounts extends ethereum.Event {
  get params(): UpdateStakingAmounts__Params {
    return new UpdateStakingAmounts__Params(this);
  }
}

export class UpdateStakingAmounts__Params {
  _event: UpdateStakingAmounts;

  constructor(event: UpdateStakingAmounts) {
    this._event = event;
  }

  get duration(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateUniswapV2Router extends ethereum.Event {
  get params(): UpdateUniswapV2Router__Params {
    return new UpdateUniswapV2Router__Params(this);
  }
}

export class UpdateUniswapV2Router__Params {
  _event: UpdateUniswapV2Router;

  constructor(event: UpdateUniswapV2Router) {
    this._event = event;
  }

  get newAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DodgeDealer__getStakingInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DodgeDealer__getAccountDividendsInfoResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class DodgeDealer__getAccountDividendsInfoAtIndexResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class DodgeDealer__getCountOfFeesToSwapResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class DodgeDealer__getReferralLeaderboardTimersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class DodgeDealer__forceUpdateReferralLeaderboardsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class DodgeDealer__getIterationsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class DodgeDealer extends ethereum.SmartContract {
  static bind(address: Address): DodgeDealer {
    return new DodgeDealer("DodgeDealer", address);
  }

  BNBRewardsBuyFee(): BigInt {
    let result = super.call(
      "BNBRewardsBuyFee",
      "BNBRewardsBuyFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BNBRewardsBuyFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BNBRewardsBuyFee",
      "BNBRewardsBuyFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BNBRewardsBuyFeeReferred(): BigInt {
    let result = super.call(
      "BNBRewardsBuyFeeReferred",
      "BNBRewardsBuyFeeReferred():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BNBRewardsBuyFeeReferred(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BNBRewardsBuyFeeReferred",
      "BNBRewardsBuyFeeReferred():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BNBRewardsSellFee(): BigInt {
    let result = super.call(
      "BNBRewardsSellFee",
      "BNBRewardsSellFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BNBRewardsSellFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BNBRewardsSellFee",
      "BNBRewardsSellFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BNBRewardsSellFeeReferred(): BigInt {
    let result = super.call(
      "BNBRewardsSellFeeReferred",
      "BNBRewardsSellFeeReferred():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BNBRewardsSellFeeReferred(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BNBRewardsSellFeeReferred",
      "BNBRewardsSellFeeReferred():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  automatedMarketMakerPairs(param0: Address): boolean {
    let result = super.call(
      "automatedMarketMakerPairs",
      "automatedMarketMakerPairs(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_automatedMarketMakerPairs(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "automatedMarketMakerPairs",
      "automatedMarketMakerPairs(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dailyTimer(): BigInt {
    let result = super.call("dailyTimer", "dailyTimer():(uint256)", []);

    return result[0].toBigInt();
  }

  try_dailyTimer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("dailyTimer", "dailyTimer():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  devFees(): BigInt {
    let result = super.call("devFees", "devFees():(uint256)", []);

    return result[0].toBigInt();
  }

  try_devFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("devFees", "devFees():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  devFeesReferred(): BigInt {
    let result = super.call(
      "devFeesReferred",
      "devFeesReferred():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_devFeesReferred(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "devFeesReferred",
      "devFeesReferred():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dividendTracker(): Address {
    let result = super.call(
      "dividendTracker",
      "dividendTracker():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_dividendTracker(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dividendTracker",
      "dividendTracker():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gasForProcessing(): BigInt {
    let result = super.call(
      "gasForProcessing",
      "gasForProcessing():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_gasForProcessing(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "gasForProcessing",
      "gasForProcessing():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidityFee(): BigInt {
    let result = super.call("liquidityFee", "liquidityFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_liquidityFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("liquidityFee", "liquidityFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityFeeReferred(): BigInt {
    let result = super.call(
      "liquidityFeeReferred",
      "liquidityFeeReferred():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidityFeeReferred(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityFeeReferred",
      "liquidityFeeReferred():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityWallet(): Address {
    let result = super.call(
      "liquidityWallet",
      "liquidityWallet():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_liquidityWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityWallet",
      "liquidityWallet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  marketingAddress(): Address {
    let result = super.call(
      "marketingAddress",
      "marketingAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_marketingAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "marketingAddress",
      "marketingAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxSellTransactionAmount(): BigInt {
    let result = super.call(
      "maxSellTransactionAmount",
      "maxSellTransactionAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxSellTransactionAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxSellTransactionAmount",
      "maxSellTransactionAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  monthlyTimer(): BigInt {
    let result = super.call("monthlyTimer", "monthlyTimer():(uint256)", []);

    return result[0].toBigInt();
  }

  try_monthlyTimer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("monthlyTimer", "monthlyTimer():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  referralFee(): BigInt {
    let result = super.call("referralFee", "referralFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_referralFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("referralFee", "referralFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referralTreeFees(param0: BigInt): BigInt {
    let result = super.call(
      "referralTreeFees",
      "referralTreeFees(int256):(uint256)",
      [ethereum.Value.fromSignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_referralTreeFees(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "referralTreeFees",
      "referralTreeFees(int256):(uint256)",
      [ethereum.Value.fromSignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referrerTree(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "referrerTree",
      "referrerTree(address,int256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromSignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_referrerTree(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "referrerTree",
      "referrerTree(address,int256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromSignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingAmounts(param0: BigInt): BigInt {
    let result = super.call(
      "stakingAmounts",
      "stakingAmounts(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_stakingAmounts(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakingAmounts",
      "stakingAmounts(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingBonus(param0: Address): BigInt {
    let result = super.call("stakingBonus", "stakingBonus(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_stakingBonus(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakingBonus",
      "stakingBonus(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingUntilDate(param0: Address): BigInt {
    let result = super.call(
      "stakingUntilDate",
      "stakingUntilDate(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_stakingUntilDate(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakingUntilDate",
      "stakingUntilDate(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapAndLiquifyEnabled(): boolean {
    let result = super.call(
      "swapAndLiquifyEnabled",
      "swapAndLiquifyEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_swapAndLiquifyEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "swapAndLiquifyEnabled",
      "swapAndLiquifyEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  swapTokensAtAmount(): BigInt {
    let result = super.call(
      "swapTokensAtAmount",
      "swapTokensAtAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_swapTokensAtAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapTokensAtAmount",
      "swapTokensAtAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapTokensAtAmountMax(): BigInt {
    let result = super.call(
      "swapTokensAtAmountMax",
      "swapTokensAtAmountMax():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_swapTokensAtAmountMax(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapTokensAtAmountMax",
      "swapTokensAtAmountMax():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalReferralsDistributed(): BigInt {
    let result = super.call(
      "totalReferralsDistributed",
      "totalReferralsDistributed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalReferralsDistributed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalReferralsDistributed",
      "totalReferralsDistributed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tradingEnabled(): boolean {
    let result = super.call("tradingEnabled", "tradingEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_tradingEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("tradingEnabled", "tradingEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uniswapV2Pair(): Address {
    let result = super.call("uniswapV2Pair", "uniswapV2Pair():(address)", []);

    return result[0].toAddress();
  }

  try_uniswapV2Pair(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapV2Pair",
      "uniswapV2Pair():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  uniswapV2Router(): Address {
    let result = super.call(
      "uniswapV2Router",
      "uniswapV2Router():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_uniswapV2Router(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapV2Router",
      "uniswapV2Router():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  weeklyTimer(): BigInt {
    let result = super.call("weeklyTimer", "weeklyTimer():(uint256)", []);

    return result[0].toBigInt();
  }

  try_weeklyTimer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("weeklyTimer", "weeklyTimer():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getReferralTreeFees(index: BigInt): BigInt {
    let result = super.call(
      "getReferralTreeFees",
      "getReferralTreeFees(int256):(uint256)",
      [ethereum.Value.fromSignedBigInt(index)]
    );

    return result[0].toBigInt();
  }

  try_getReferralTreeFees(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReferralTreeFees",
      "getReferralTreeFees(int256):(uint256)",
      [ethereum.Value.fromSignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReferralTreeFeesLength(): BigInt {
    let result = super.call(
      "getReferralTreeFeesLength",
      "getReferralTreeFeesLength():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getReferralTreeFeesLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReferralTreeFeesLength",
      "getReferralTreeFeesLength():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakingInfo(account: Address): DodgeDealer__getStakingInfoResult {
    let result = super.call(
      "getStakingInfo",
      "getStakingInfo(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return new DodgeDealer__getStakingInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getStakingInfo(
    account: Address
  ): ethereum.CallResult<DodgeDealer__getStakingInfoResult> {
    let result = super.tryCall(
      "getStakingInfo",
      "getStakingInfo(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DodgeDealer__getStakingInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getTotalDividendsDistributed(): BigInt {
    let result = super.call(
      "getTotalDividendsDistributed",
      "getTotalDividendsDistributed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalDividendsDistributed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalDividendsDistributed",
      "getTotalDividendsDistributed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isExcludedFromFees(account: Address): boolean {
    let result = super.call(
      "isExcludedFromFees",
      "isExcludedFromFees(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBoolean();
  }

  try_isExcludedFromFees(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isExcludedFromFees",
      "isExcludedFromFees(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawableDividendOf(account: Address): BigInt {
    let result = super.call(
      "withdrawableDividendOf",
      "withdrawableDividendOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_withdrawableDividendOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawableDividendOf",
      "withdrawableDividendOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dividendTokenBalanceOf(account: Address): BigInt {
    let result = super.call(
      "dividendTokenBalanceOf",
      "dividendTokenBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_dividendTokenBalanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dividendTokenBalanceOf",
      "dividendTokenBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAccountDividendsInfo(
    account: Address
  ): DodgeDealer__getAccountDividendsInfoResult {
    let result = super.call(
      "getAccountDividendsInfo",
      "getAccountDividendsInfo(address):(address,int256,int256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return new DodgeDealer__getAccountDividendsInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getAccountDividendsInfo(
    account: Address
  ): ethereum.CallResult<DodgeDealer__getAccountDividendsInfoResult> {
    let result = super.tryCall(
      "getAccountDividendsInfo",
      "getAccountDividendsInfo(address):(address,int256,int256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DodgeDealer__getAccountDividendsInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  getAccountDividendsInfoAtIndex(
    index: BigInt
  ): DodgeDealer__getAccountDividendsInfoAtIndexResult {
    let result = super.call(
      "getAccountDividendsInfoAtIndex",
      "getAccountDividendsInfoAtIndex(uint256):(address,int256,int256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return new DodgeDealer__getAccountDividendsInfoAtIndexResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getAccountDividendsInfoAtIndex(
    index: BigInt
  ): ethereum.CallResult<DodgeDealer__getAccountDividendsInfoAtIndexResult> {
    let result = super.tryCall(
      "getAccountDividendsInfoAtIndex",
      "getAccountDividendsInfoAtIndex(uint256):(address,int256,int256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DodgeDealer__getAccountDividendsInfoAtIndexResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  getLastProcessedIndex(): BigInt {
    let result = super.call(
      "getLastProcessedIndex",
      "getLastProcessedIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLastProcessedIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastProcessedIndex",
      "getLastProcessedIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumberOfDividendTokenHolders(): BigInt {
    let result = super.call(
      "getNumberOfDividendTokenHolders",
      "getNumberOfDividendTokenHolders():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumberOfDividendTokenHolders(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfDividendTokenHolders",
      "getNumberOfDividendTokenHolders():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isExcludedFromAutoClaim(account: Address): boolean {
    let result = super.call(
      "isExcludedFromAutoClaim",
      "isExcludedFromAutoClaim(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBoolean();
  }

  try_isExcludedFromAutoClaim(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isExcludedFromAutoClaim",
      "isExcludedFromAutoClaim(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isReinvest(account: Address): boolean {
    let result = super.call("isReinvest", "isReinvest(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isReinvest(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isReinvest", "isReinvest(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getETHBalance(): BigInt {
    let result = super.call("getETHBalance", "getETHBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getETHBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getETHBalance",
      "getETHBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNativeBalance(): BigInt {
    let result = super.call(
      "getNativeBalance",
      "getNativeBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNativeBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNativeBalance",
      "getNativeBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCountOfFeesToSwap(): DodgeDealer__getCountOfFeesToSwapResult {
    let result = super.call(
      "getCountOfFeesToSwap",
      "getCountOfFeesToSwap():(uint256,uint256,uint256)",
      []
    );

    return new DodgeDealer__getCountOfFeesToSwapResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getCountOfFeesToSwap(): ethereum.CallResult<
    DodgeDealer__getCountOfFeesToSwapResult
  > {
    let result = super.tryCall(
      "getCountOfFeesToSwap",
      "getCountOfFeesToSwap():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DodgeDealer__getCountOfFeesToSwapResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getPayoutToken(account: Address): Address {
    let result = super.call(
      "getPayoutToken",
      "getPayoutToken(address):(address)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toAddress();
  }

  try_getPayoutToken(account: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPayoutToken",
      "getPayoutToken(address):(address)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllowTokens(token: Address): boolean {
    let result = super.call(
      "getAllowTokens",
      "getAllowTokens(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBoolean();
  }

  try_getAllowTokens(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getAllowTokens",
      "getAllowTokens(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getReferrer(): Address {
    let result = super.call("getReferrer", "getReferrer():(address)", []);

    return result[0].toAddress();
  }

  try_getReferrer(): ethereum.CallResult<Address> {
    let result = super.tryCall("getReferrer", "getReferrer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReferrerOf(account: Address): Address {
    let result = super.call(
      "getReferrerOf",
      "getReferrerOf(address):(address)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toAddress();
  }

  try_getReferrerOf(account: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getReferrerOf",
      "getReferrerOf(address):(address)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReferralTree(account: Address, index: BigInt): Address {
    let result = super.call(
      "getReferralTree",
      "getReferralTree(address,int256):(address)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromSignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getReferralTree(
    account: Address,
    index: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getReferralTree",
      "getReferralTree(address,int256):(address)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromSignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReferralTreeLength(account: Address): BigInt {
    let result = super.call(
      "getReferralTreeLength",
      "getReferralTreeLength(address):(int256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getReferralTreeLength(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReferralTreeLength",
      "getReferralTreeLength(address):(int256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReferralLeaderboardTimers(): DodgeDealer__getReferralLeaderboardTimersResult {
    let result = super.call(
      "getReferralLeaderboardTimers",
      "getReferralLeaderboardTimers():(uint256,uint256,uint256)",
      []
    );

    return new DodgeDealer__getReferralLeaderboardTimersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getReferralLeaderboardTimers(): ethereum.CallResult<
    DodgeDealer__getReferralLeaderboardTimersResult
  > {
    let result = super.tryCall(
      "getReferralLeaderboardTimers",
      "getReferralLeaderboardTimers():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DodgeDealer__getReferralLeaderboardTimersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  forceUpdateReferralLeaderboards(): DodgeDealer__forceUpdateReferralLeaderboardsResult {
    let result = super.call(
      "forceUpdateReferralLeaderboards",
      "forceUpdateReferralLeaderboards():(uint256,uint256,uint256)",
      []
    );

    return new DodgeDealer__forceUpdateReferralLeaderboardsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_forceUpdateReferralLeaderboards(): ethereum.CallResult<
    DodgeDealer__forceUpdateReferralLeaderboardsResult
  > {
    let result = super.tryCall(
      "forceUpdateReferralLeaderboards",
      "forceUpdateReferralLeaderboards():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DodgeDealer__forceUpdateReferralLeaderboardsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getIterations(): DodgeDealer__getIterationsResult {
    let result = super.call(
      "getIterations",
      "getIterations():(uint256,uint256,uint256,uint256)",
      []
    );

    return new DodgeDealer__getIterationsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getIterations(): ethereum.CallResult<DodgeDealer__getIterationsResult> {
    let result = super.tryCall(
      "getIterations",
      "getIterations():(uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DodgeDealer__getIterationsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  isBlacklisted(account: Address): boolean {
    let result = super.call("isBlacklisted", "isBlacklisted(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isBlacklisted(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isBlacklisted",
      "isBlacklisted(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateStakingAmountsCall extends ethereum.Call {
  get inputs(): UpdateStakingAmountsCall__Inputs {
    return new UpdateStakingAmountsCall__Inputs(this);
  }

  get outputs(): UpdateStakingAmountsCall__Outputs {
    return new UpdateStakingAmountsCall__Outputs(this);
  }
}

export class UpdateStakingAmountsCall__Inputs {
  _call: UpdateStakingAmountsCall;

  constructor(call: UpdateStakingAmountsCall) {
    this._call = call;
  }

  get duration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bonus(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateStakingAmountsCall__Outputs {
  _call: UpdateStakingAmountsCall;

  constructor(call: UpdateStakingAmountsCall) {
    this._call = call;
  }
}

export class EnableTradingCall extends ethereum.Call {
  get inputs(): EnableTradingCall__Inputs {
    return new EnableTradingCall__Inputs(this);
  }

  get outputs(): EnableTradingCall__Outputs {
    return new EnableTradingCall__Outputs(this);
  }
}

export class EnableTradingCall__Inputs {
  _call: EnableTradingCall;

  constructor(call: EnableTradingCall) {
    this._call = call;
  }
}

export class EnableTradingCall__Outputs {
  _call: EnableTradingCall;

  constructor(call: EnableTradingCall) {
    this._call = call;
  }
}

export class SetPresaleWalletCall extends ethereum.Call {
  get inputs(): SetPresaleWalletCall__Inputs {
    return new SetPresaleWalletCall__Inputs(this);
  }

  get outputs(): SetPresaleWalletCall__Outputs {
    return new SetPresaleWalletCall__Outputs(this);
  }
}

export class SetPresaleWalletCall__Inputs {
  _call: SetPresaleWalletCall;

  constructor(call: SetPresaleWalletCall) {
    this._call = call;
  }

  get wallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPresaleWalletCall__Outputs {
  _call: SetPresaleWalletCall;

  constructor(call: SetPresaleWalletCall) {
    this._call = call;
  }
}

export class EnableStakingCall extends ethereum.Call {
  get inputs(): EnableStakingCall__Inputs {
    return new EnableStakingCall__Inputs(this);
  }

  get outputs(): EnableStakingCall__Outputs {
    return new EnableStakingCall__Outputs(this);
  }
}

export class EnableStakingCall__Inputs {
  _call: EnableStakingCall;

  constructor(call: EnableStakingCall) {
    this._call = call;
  }

  get enable(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class EnableStakingCall__Outputs {
  _call: EnableStakingCall;

  constructor(call: EnableStakingCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get duration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class UpdateMaxAmountCall extends ethereum.Call {
  get inputs(): UpdateMaxAmountCall__Inputs {
    return new UpdateMaxAmountCall__Inputs(this);
  }

  get outputs(): UpdateMaxAmountCall__Outputs {
    return new UpdateMaxAmountCall__Outputs(this);
  }
}

export class UpdateMaxAmountCall__Inputs {
  _call: UpdateMaxAmountCall;

  constructor(call: UpdateMaxAmountCall) {
    this._call = call;
  }

  get newNum(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMaxAmountCall__Outputs {
  _call: UpdateMaxAmountCall;

  constructor(call: UpdateMaxAmountCall) {
    this._call = call;
  }
}

export class UpdateDividendTrackerCall extends ethereum.Call {
  get inputs(): UpdateDividendTrackerCall__Inputs {
    return new UpdateDividendTrackerCall__Inputs(this);
  }

  get outputs(): UpdateDividendTrackerCall__Outputs {
    return new UpdateDividendTrackerCall__Outputs(this);
  }
}

export class UpdateDividendTrackerCall__Inputs {
  _call: UpdateDividendTrackerCall;

  constructor(call: UpdateDividendTrackerCall) {
    this._call = call;
  }

  get newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateDividendTrackerCall__Outputs {
  _call: UpdateDividendTrackerCall;

  constructor(call: UpdateDividendTrackerCall) {
    this._call = call;
  }
}

export class SetMarketingAddressCall extends ethereum.Call {
  get inputs(): SetMarketingAddressCall__Inputs {
    return new SetMarketingAddressCall__Inputs(this);
  }

  get outputs(): SetMarketingAddressCall__Outputs {
    return new SetMarketingAddressCall__Outputs(this);
  }
}

export class SetMarketingAddressCall__Inputs {
  _call: SetMarketingAddressCall;

  constructor(call: SetMarketingAddressCall) {
    this._call = call;
  }

  get newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMarketingAddressCall__Outputs {
  _call: SetMarketingAddressCall;

  constructor(call: SetMarketingAddressCall) {
    this._call = call;
  }
}

export class UpdateUniswapV2RouterCall extends ethereum.Call {
  get inputs(): UpdateUniswapV2RouterCall__Inputs {
    return new UpdateUniswapV2RouterCall__Inputs(this);
  }

  get outputs(): UpdateUniswapV2RouterCall__Outputs {
    return new UpdateUniswapV2RouterCall__Outputs(this);
  }
}

export class UpdateUniswapV2RouterCall__Inputs {
  _call: UpdateUniswapV2RouterCall;

  constructor(call: UpdateUniswapV2RouterCall) {
    this._call = call;
  }

  get newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateUniswapV2RouterCall__Outputs {
  _call: UpdateUniswapV2RouterCall;

  constructor(call: UpdateUniswapV2RouterCall) {
    this._call = call;
  }
}

export class ExcludeFromFeesCall extends ethereum.Call {
  get inputs(): ExcludeFromFeesCall__Inputs {
    return new ExcludeFromFeesCall__Inputs(this);
  }

  get outputs(): ExcludeFromFeesCall__Outputs {
    return new ExcludeFromFeesCall__Outputs(this);
  }
}

export class ExcludeFromFeesCall__Inputs {
  _call: ExcludeFromFeesCall;

  constructor(call: ExcludeFromFeesCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get excluded(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ExcludeFromFeesCall__Outputs {
  _call: ExcludeFromFeesCall;

  constructor(call: ExcludeFromFeesCall) {
    this._call = call;
  }
}

export class EnableSwapAndLiquifyCall extends ethereum.Call {
  get inputs(): EnableSwapAndLiquifyCall__Inputs {
    return new EnableSwapAndLiquifyCall__Inputs(this);
  }

  get outputs(): EnableSwapAndLiquifyCall__Outputs {
    return new EnableSwapAndLiquifyCall__Outputs(this);
  }
}

export class EnableSwapAndLiquifyCall__Inputs {
  _call: EnableSwapAndLiquifyCall;

  constructor(call: EnableSwapAndLiquifyCall) {
    this._call = call;
  }

  get enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class EnableSwapAndLiquifyCall__Outputs {
  _call: EnableSwapAndLiquifyCall;

  constructor(call: EnableSwapAndLiquifyCall) {
    this._call = call;
  }
}

export class SetAutomatedMarketMakerPairCall extends ethereum.Call {
  get inputs(): SetAutomatedMarketMakerPairCall__Inputs {
    return new SetAutomatedMarketMakerPairCall__Inputs(this);
  }

  get outputs(): SetAutomatedMarketMakerPairCall__Outputs {
    return new SetAutomatedMarketMakerPairCall__Outputs(this);
  }
}

export class SetAutomatedMarketMakerPairCall__Inputs {
  _call: SetAutomatedMarketMakerPairCall;

  constructor(call: SetAutomatedMarketMakerPairCall) {
    this._call = call;
  }

  get pair(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAutomatedMarketMakerPairCall__Outputs {
  _call: SetAutomatedMarketMakerPairCall;

  constructor(call: SetAutomatedMarketMakerPairCall) {
    this._call = call;
  }
}

export class SetAllowCustomTokensCall extends ethereum.Call {
  get inputs(): SetAllowCustomTokensCall__Inputs {
    return new SetAllowCustomTokensCall__Inputs(this);
  }

  get outputs(): SetAllowCustomTokensCall__Outputs {
    return new SetAllowCustomTokensCall__Outputs(this);
  }
}

export class SetAllowCustomTokensCall__Inputs {
  _call: SetAllowCustomTokensCall;

  constructor(call: SetAllowCustomTokensCall) {
    this._call = call;
  }

  get allow(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetAllowCustomTokensCall__Outputs {
  _call: SetAllowCustomTokensCall;

  constructor(call: SetAllowCustomTokensCall) {
    this._call = call;
  }
}

export class SetAllowAutoReinvestCall extends ethereum.Call {
  get inputs(): SetAllowAutoReinvestCall__Inputs {
    return new SetAllowAutoReinvestCall__Inputs(this);
  }

  get outputs(): SetAllowAutoReinvestCall__Outputs {
    return new SetAllowAutoReinvestCall__Outputs(this);
  }
}

export class SetAllowAutoReinvestCall__Inputs {
  _call: SetAllowAutoReinvestCall;

  constructor(call: SetAllowAutoReinvestCall) {
    this._call = call;
  }

  get allow(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetAllowAutoReinvestCall__Outputs {
  _call: SetAllowAutoReinvestCall;

  constructor(call: SetAllowAutoReinvestCall) {
    this._call = call;
  }
}

export class UpdateLiquidityWalletCall extends ethereum.Call {
  get inputs(): UpdateLiquidityWalletCall__Inputs {
    return new UpdateLiquidityWalletCall__Inputs(this);
  }

  get outputs(): UpdateLiquidityWalletCall__Outputs {
    return new UpdateLiquidityWalletCall__Outputs(this);
  }
}

export class UpdateLiquidityWalletCall__Inputs {
  _call: UpdateLiquidityWalletCall;

  constructor(call: UpdateLiquidityWalletCall) {
    this._call = call;
  }

  get newLiquidityWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateLiquidityWalletCall__Outputs {
  _call: UpdateLiquidityWalletCall;

  constructor(call: UpdateLiquidityWalletCall) {
    this._call = call;
  }
}

export class UpdateGasForProcessingCall extends ethereum.Call {
  get inputs(): UpdateGasForProcessingCall__Inputs {
    return new UpdateGasForProcessingCall__Inputs(this);
  }

  get outputs(): UpdateGasForProcessingCall__Outputs {
    return new UpdateGasForProcessingCall__Outputs(this);
  }
}

export class UpdateGasForProcessingCall__Inputs {
  _call: UpdateGasForProcessingCall;

  constructor(call: UpdateGasForProcessingCall) {
    this._call = call;
  }

  get newValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateGasForProcessingCall__Outputs {
  _call: UpdateGasForProcessingCall;

  constructor(call: UpdateGasForProcessingCall) {
    this._call = call;
  }
}

export class UpdateFeesCall extends ethereum.Call {
  get inputs(): UpdateFeesCall__Inputs {
    return new UpdateFeesCall__Inputs(this);
  }

  get outputs(): UpdateFeesCall__Outputs {
    return new UpdateFeesCall__Outputs(this);
  }
}

export class UpdateFeesCall__Inputs {
  _call: UpdateFeesCall;

  constructor(call: UpdateFeesCall) {
    this._call = call;
  }

  get dev(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get BNBRewardsBuy(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get BNBRewardsSell(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get referral(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class UpdateFeesCall__Outputs {
  _call: UpdateFeesCall;

  constructor(call: UpdateFeesCall) {
    this._call = call;
  }
}

export class UpdateFeesReferredCall extends ethereum.Call {
  get inputs(): UpdateFeesReferredCall__Inputs {
    return new UpdateFeesReferredCall__Inputs(this);
  }

  get outputs(): UpdateFeesReferredCall__Outputs {
    return new UpdateFeesReferredCall__Outputs(this);
  }
}

export class UpdateFeesReferredCall__Inputs {
  _call: UpdateFeesReferredCall;

  constructor(call: UpdateFeesReferredCall) {
    this._call = call;
  }

  get devReferred(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get liquidityReferred(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get BNBRewardsBuyReferred(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get BNBRewardsSellReferred(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateFeesReferredCall__Outputs {
  _call: UpdateFeesReferredCall;

  constructor(call: UpdateFeesReferredCall) {
    this._call = call;
  }
}

export class SetReferralTreeFeesLengthCall extends ethereum.Call {
  get inputs(): SetReferralTreeFeesLengthCall__Inputs {
    return new SetReferralTreeFeesLengthCall__Inputs(this);
  }

  get outputs(): SetReferralTreeFeesLengthCall__Outputs {
    return new SetReferralTreeFeesLengthCall__Outputs(this);
  }
}

export class SetReferralTreeFeesLengthCall__Inputs {
  _call: SetReferralTreeFeesLengthCall;

  constructor(call: SetReferralTreeFeesLengthCall) {
    this._call = call;
  }

  get length(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetReferralTreeFeesLengthCall__Outputs {
  _call: SetReferralTreeFeesLengthCall;

  constructor(call: SetReferralTreeFeesLengthCall) {
    this._call = call;
  }
}

export class UpdateReferralTreeFeesCall extends ethereum.Call {
  get inputs(): UpdateReferralTreeFeesCall__Inputs {
    return new UpdateReferralTreeFeesCall__Inputs(this);
  }

  get outputs(): UpdateReferralTreeFeesCall__Outputs {
    return new UpdateReferralTreeFeesCall__Outputs(this);
  }
}

export class UpdateReferralTreeFeesCall__Inputs {
  _call: UpdateReferralTreeFeesCall;

  constructor(call: UpdateReferralTreeFeesCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateReferralTreeFeesCall__Outputs {
  _call: UpdateReferralTreeFeesCall;

  constructor(call: UpdateReferralTreeFeesCall) {
    this._call = call;
  }
}

export class ProcessDividendTrackerCall extends ethereum.Call {
  get inputs(): ProcessDividendTrackerCall__Inputs {
    return new ProcessDividendTrackerCall__Inputs(this);
  }

  get outputs(): ProcessDividendTrackerCall__Outputs {
    return new ProcessDividendTrackerCall__Outputs(this);
  }
}

export class ProcessDividendTrackerCall__Inputs {
  _call: ProcessDividendTrackerCall;

  constructor(call: ProcessDividendTrackerCall) {
    this._call = call;
  }

  get gas(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProcessDividendTrackerCall__Outputs {
  _call: ProcessDividendTrackerCall;

  constructor(call: ProcessDividendTrackerCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class SetAutoClaimCall extends ethereum.Call {
  get inputs(): SetAutoClaimCall__Inputs {
    return new SetAutoClaimCall__Inputs(this);
  }

  get outputs(): SetAutoClaimCall__Outputs {
    return new SetAutoClaimCall__Outputs(this);
  }
}

export class SetAutoClaimCall__Inputs {
  _call: SetAutoClaimCall;

  constructor(call: SetAutoClaimCall) {
    this._call = call;
  }

  get value(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetAutoClaimCall__Outputs {
  _call: SetAutoClaimCall;

  constructor(call: SetAutoClaimCall) {
    this._call = call;
  }
}

export class SetReinvestCall extends ethereum.Call {
  get inputs(): SetReinvestCall__Inputs {
    return new SetReinvestCall__Inputs(this);
  }

  get outputs(): SetReinvestCall__Outputs {
    return new SetReinvestCall__Outputs(this);
  }
}

export class SetReinvestCall__Inputs {
  _call: SetReinvestCall;

  constructor(call: SetReinvestCall) {
    this._call = call;
  }

  get value(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetReinvestCall__Outputs {
  _call: SetReinvestCall;

  constructor(call: SetReinvestCall) {
    this._call = call;
  }
}

export class SetDividendsPausedCall extends ethereum.Call {
  get inputs(): SetDividendsPausedCall__Inputs {
    return new SetDividendsPausedCall__Inputs(this);
  }

  get outputs(): SetDividendsPausedCall__Outputs {
    return new SetDividendsPausedCall__Outputs(this);
  }
}

export class SetDividendsPausedCall__Inputs {
  _call: SetDividendsPausedCall;

  constructor(call: SetDividendsPausedCall) {
    this._call = call;
  }

  get value(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetDividendsPausedCall__Outputs {
  _call: SetDividendsPausedCall;

  constructor(call: SetDividendsPausedCall) {
    this._call = call;
  }
}

export class TransferETHCall extends ethereum.Call {
  get inputs(): TransferETHCall__Inputs {
    return new TransferETHCall__Inputs(this);
  }

  get outputs(): TransferETHCall__Outputs {
    return new TransferETHCall__Outputs(this);
  }
}

export class TransferETHCall__Inputs {
  _call: TransferETHCall;

  constructor(call: TransferETHCall) {
    this._call = call;
  }

  get destination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get bnb(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferETHCall__Outputs {
  _call: TransferETHCall;

  constructor(call: TransferETHCall) {
    this._call = call;
  }
}

export class TransferERC20TokenCall extends ethereum.Call {
  get inputs(): TransferERC20TokenCall__Inputs {
    return new TransferERC20TokenCall__Inputs(this);
  }

  get outputs(): TransferERC20TokenCall__Outputs {
    return new TransferERC20TokenCall__Outputs(this);
  }
}

export class TransferERC20TokenCall__Inputs {
  _call: TransferERC20TokenCall;

  constructor(call: TransferERC20TokenCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get destination(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class TransferERC20TokenCall__Outputs {
  _call: TransferERC20TokenCall;

  constructor(call: TransferERC20TokenCall) {
    this._call = call;
  }
}

export class SetSwapTokensAmountCall extends ethereum.Call {
  get inputs(): SetSwapTokensAmountCall__Inputs {
    return new SetSwapTokensAmountCall__Inputs(this);
  }

  get outputs(): SetSwapTokensAmountCall__Outputs {
    return new SetSwapTokensAmountCall__Outputs(this);
  }
}

export class SetSwapTokensAmountCall__Inputs {
  _call: SetSwapTokensAmountCall;

  constructor(call: SetSwapTokensAmountCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSwapTokensAmountCall__Outputs {
  _call: SetSwapTokensAmountCall;

  constructor(call: SetSwapTokensAmountCall) {
    this._call = call;
  }
}

export class SetSwapTokensAmountMaxCall extends ethereum.Call {
  get inputs(): SetSwapTokensAmountMaxCall__Inputs {
    return new SetSwapTokensAmountMaxCall__Inputs(this);
  }

  get outputs(): SetSwapTokensAmountMaxCall__Outputs {
    return new SetSwapTokensAmountMaxCall__Outputs(this);
  }
}

export class SetSwapTokensAmountMaxCall__Inputs {
  _call: SetSwapTokensAmountMaxCall;

  constructor(call: SetSwapTokensAmountMaxCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSwapTokensAmountMaxCall__Outputs {
  _call: SetSwapTokensAmountMaxCall;

  constructor(call: SetSwapTokensAmountMaxCall) {
    this._call = call;
  }
}

export class UpdatePayoutTokenCall extends ethereum.Call {
  get inputs(): UpdatePayoutTokenCall__Inputs {
    return new UpdatePayoutTokenCall__Inputs(this);
  }

  get outputs(): UpdatePayoutTokenCall__Outputs {
    return new UpdatePayoutTokenCall__Outputs(this);
  }
}

export class UpdatePayoutTokenCall__Inputs {
  _call: UpdatePayoutTokenCall;

  constructor(call: UpdatePayoutTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdatePayoutTokenCall__Outputs {
  _call: UpdatePayoutTokenCall;

  constructor(call: UpdatePayoutTokenCall) {
    this._call = call;
  }
}

export class UpdateAllowTokensCall extends ethereum.Call {
  get inputs(): UpdateAllowTokensCall__Inputs {
    return new UpdateAllowTokensCall__Inputs(this);
  }

  get outputs(): UpdateAllowTokensCall__Outputs {
    return new UpdateAllowTokensCall__Outputs(this);
  }
}

export class UpdateAllowTokensCall__Inputs {
  _call: UpdateAllowTokensCall;

  constructor(call: UpdateAllowTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get allow(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdateAllowTokensCall__Outputs {
  _call: UpdateAllowTokensCall;

  constructor(call: UpdateAllowTokensCall) {
    this._call = call;
  }
}

export class SetReferrerCall extends ethereum.Call {
  get inputs(): SetReferrerCall__Inputs {
    return new SetReferrerCall__Inputs(this);
  }

  get outputs(): SetReferrerCall__Outputs {
    return new SetReferrerCall__Outputs(this);
  }
}

export class SetReferrerCall__Inputs {
  _call: SetReferrerCall;

  constructor(call: SetReferrerCall) {
    this._call = call;
  }

  get _referrer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetReferrerCall__Outputs {
  _call: SetReferrerCall;

  constructor(call: SetReferrerCall) {
    this._call = call;
  }
}

export class SetReferralTreeAtIndexCall extends ethereum.Call {
  get inputs(): SetReferralTreeAtIndexCall__Inputs {
    return new SetReferralTreeAtIndexCall__Inputs(this);
  }

  get outputs(): SetReferralTreeAtIndexCall__Outputs {
    return new SetReferralTreeAtIndexCall__Outputs(this);
  }
}

export class SetReferralTreeAtIndexCall__Inputs {
  _call: SetReferralTreeAtIndexCall;

  constructor(call: SetReferralTreeAtIndexCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get accountToInsert(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetReferralTreeAtIndexCall__Outputs {
  _call: SetReferralTreeAtIndexCall;

  constructor(call: SetReferralTreeAtIndexCall) {
    this._call = call;
  }
}

export class SetReferralLeaderboardTimersCall extends ethereum.Call {
  get inputs(): SetReferralLeaderboardTimersCall__Inputs {
    return new SetReferralLeaderboardTimersCall__Inputs(this);
  }

  get outputs(): SetReferralLeaderboardTimersCall__Outputs {
    return new SetReferralLeaderboardTimersCall__Outputs(this);
  }
}

export class SetReferralLeaderboardTimersCall__Inputs {
  _call: SetReferralLeaderboardTimersCall;

  constructor(call: SetReferralLeaderboardTimersCall) {
    this._call = call;
  }

  get daily(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get weekly(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get monthly(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetReferralLeaderboardTimersCall__Outputs {
  _call: SetReferralLeaderboardTimersCall;

  constructor(call: SetReferralLeaderboardTimersCall) {
    this._call = call;
  }
}

export class ForceUpdateReferralLeaderboardsCall extends ethereum.Call {
  get inputs(): ForceUpdateReferralLeaderboardsCall__Inputs {
    return new ForceUpdateReferralLeaderboardsCall__Inputs(this);
  }

  get outputs(): ForceUpdateReferralLeaderboardsCall__Outputs {
    return new ForceUpdateReferralLeaderboardsCall__Outputs(this);
  }
}

export class ForceUpdateReferralLeaderboardsCall__Inputs {
  _call: ForceUpdateReferralLeaderboardsCall;

  constructor(call: ForceUpdateReferralLeaderboardsCall) {
    this._call = call;
  }
}

export class ForceUpdateReferralLeaderboardsCall__Outputs {
  _call: ForceUpdateReferralLeaderboardsCall;

  constructor(call: ForceUpdateReferralLeaderboardsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get value2(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class SetIterationsCall extends ethereum.Call {
  get inputs(): SetIterationsCall__Inputs {
    return new SetIterationsCall__Inputs(this);
  }

  get outputs(): SetIterationsCall__Outputs {
    return new SetIterationsCall__Outputs(this);
  }
}

export class SetIterationsCall__Inputs {
  _call: SetIterationsCall;

  constructor(call: SetIterationsCall) {
    this._call = call;
  }

  get newIteration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newIterationDaily(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newIterationWeekly(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get newIterationMonthly(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetIterationsCall__Outputs {
  _call: SetIterationsCall;

  constructor(call: SetIterationsCall) {
    this._call = call;
  }
}

export class SetBlacklistedCall extends ethereum.Call {
  get inputs(): SetBlacklistedCall__Inputs {
    return new SetBlacklistedCall__Inputs(this);
  }

  get outputs(): SetBlacklistedCall__Outputs {
    return new SetBlacklistedCall__Outputs(this);
  }
}

export class SetBlacklistedCall__Inputs {
  _call: SetBlacklistedCall;

  constructor(call: SetBlacklistedCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetBlacklistedCall__Outputs {
  _call: SetBlacklistedCall;

  constructor(call: SetBlacklistedCall) {
    this._call = call;
  }
}

export class ForceSwapAndSendDividendsAndMarketingFundsAndLiquidityCall extends ethereum.Call {
  get inputs(): ForceSwapAndSendDividendsAndMarketingFundsAndLiquidityCall__Inputs {
    return new ForceSwapAndSendDividendsAndMarketingFundsAndLiquidityCall__Inputs(
      this
    );
  }

  get outputs(): ForceSwapAndSendDividendsAndMarketingFundsAndLiquidityCall__Outputs {
    return new ForceSwapAndSendDividendsAndMarketingFundsAndLiquidityCall__Outputs(
      this
    );
  }
}

export class ForceSwapAndSendDividendsAndMarketingFundsAndLiquidityCall__Inputs {
  _call: ForceSwapAndSendDividendsAndMarketingFundsAndLiquidityCall;

  constructor(
    call: ForceSwapAndSendDividendsAndMarketingFundsAndLiquidityCall
  ) {
    this._call = call;
  }

  get dividends(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get marketing(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ForceSwapAndSendDividendsAndMarketingFundsAndLiquidityCall__Outputs {
  _call: ForceSwapAndSendDividendsAndMarketingFundsAndLiquidityCall;

  constructor(
    call: ForceSwapAndSendDividendsAndMarketingFundsAndLiquidityCall
  ) {
    this._call = call;
  }
}
